version: 2.1
jobs:
  build-job:
    docker:

      - image: circleci/python
        environment:
          TEST_DATABASE_URI: ${TEST_DATABASE_URI}
          APP_ENVIRONMENT: "testing"
          
             
      - image: circleci/postgres:9.6-alpine
        environment:
          SECRET_KEY: ${SECRET_KEY}
          POSTGRES_USER: ${POSTGRES_USER_TEST}
          POSTGRES_DB: ${POSTGRES_DB_TEST}
          POSTGRES_PASSWORD: ${POSTGRES_PASSWORD_TEST}

    working_directory: ~/Flight-Boooking-Application

    steps:
      - checkout
      - run: # test what branch we're on.
          name: "What env am I on?"
          command: |
            echo ${POSTGRES_USER_TEST}
            

      # Download and cache dependencies
      - restore_cache:
          keys:
          - v1-dependencies-{{ checksum "requirements.txt" }}
          # fallback to using the latest cache if no exact match is found
          - v1-dependencies-

      - run:
          name: install dependencies
          command: |
            python3 -m venv venv
            . venv/bin/activate
            pip install -r requirements.txt
      - save_cache:
          paths:
            - ./venv
          key: v1-dependencies-{{ checksum "requirements.txt" }}
        
      # run tests!
      # this example uses Django's built-in test-runner
      # other common Python testing frameworks include pytest and nose
      # https://pytest.org
      # https://nose.readthedocs.io
      - run:
          name: run tests
          command: |
            . venv/bin/activate
            pytest
          
  # deploy-job:
  #   docker:
  #     - image: circleci/python:3.6.1
  #       environment:
  #         DEV_DATABASE_URI: $(DEV_DATABASE_URI)
             
  #     - image: circleci/postgres:9.6.6
  #       environment:
  #         SECRET_KEY: "********"
  #         POSTGRES_USER: yummyrecipes
  #         POSTGRES_DB: test
  #         POSTGRES_PASSWORD: admin

  #   working_directory: ~/Flight-Boooking-Application
  #   steps:

  #     - checkout
  #     - run:
  #         name: Deploy Master to Heroku
  #         command: |  # this command is framework-dependent and may vary 
  #           bash .circleci/setup-heroku.sh 
  #           heroku git:remote -a circle-yummy-api
  #           git push --force https://heroku:$HEROKU_API_KEY@git.heroku.com/circle-yummy-api.git HEAD:refs/heads/master
  #           sleep 5  # sleep for 5 seconds to wait for dynos
  #           heroku restart
workflows:
  version: 2.1
  build-deploy:
    jobs:
      - build-job
      # - deploy-job:  # only deploy when master successfully builds
      #     requires:
      #       - build-job
      #     filters:
      #       branches:
      #         only: master